defmodule TodoList do
  defstruct auto_id: 1, entries: Map.new()

  def init do
    [
      %{date: {2013, 12, 19}, title: "Dentist"},
      %{date: {2013, 12, 20}, title: "Shopping"},
      %{date: {2013, 12, 19}, title: "Movies"}
    ]
  end

  def new, do: %TodoList{}

  def new(entries \\ []) do
    Enum.reduce(entries, %TodoList{}, &add_entry(&2, &1))
  end

  def add_entry(%TodoList{entries: entries, auto_id: auto_id} = todo_list, entry) do
    entry = Map.put(entry, :id, auto_id)
    new_entries = Map.put(entries, auto_id, entry)
    %TodoList{todo_list | entries: new_entries, auto_id: auto_id + 1}
  end

  def entries(%TodoList{entries: entries}, date) do
    entries
    |> Stream.filter(fn {_, entry} -> entry.date == date end)
    |> Enum.map(fn {_, entry} -> entry end)
  end

  def update_entry(todo_list, %{} = entry) do
    update_entry(todo_list, entry.id, fn _ -> entry end)
  end

  def update_entry(
        %TodoList{entries: entries} = todo_list,
        entry_id,
        updater
      ) do
    case entries[entry_id] do
      nil ->
        todo_list

      old_entry ->
        new_entry = %{id: ^entry_id} = updater.(old_entry)
        new_entries = Map.put(entries, entry_id, new_entry)
        %TodoList{todo_list | entries: new_entries}
    end
  end

  def delete_entry(%TodoList{entries: entries} = todo_list, id) do
    new_entries = Map.delete(entries, id)
    %TodoList{todo_list | entries: new_entries}
  end
end

defmodule TodoList.Importer do
  def import(file_path) do
    File.stream!(file_path)
    |> Stream.map(&String.replace(&1, ~r{\n}, ""))
    |> Stream.map(&parse_line(&1))
    |> TodoList.new()
  end

  def parse_line(line) do
    [date, title] = String.split(line, ",")
    %{date: parse_date(date), title: title}
  end

  def parse_date(date) do
    String.split(date, "/")
    |> Enum.map(&String.to_integer(&1))
    |> List.to_tuple()
  end
end
